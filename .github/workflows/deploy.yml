name: 'Deploy üöÄ'

on:
  push:
    tags:
      - '*.*.*'

env:
  GH_TOKEN: ${{ github.token }}
  NDK_VERSION: "27.2.12479018"
  TAURI_VERSION: "^2.0.0"
  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.APP_SIGN_KEY }}
  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.APP_SIGN_PASSWORD }}

jobs:
  deploy:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    environment:
      name: production
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
      contents: write
      discussions: write
    outputs:
      #Linux
      x86_64_APPIMAGE_SIG: ${{ steps.gen_artifacts.outputs.x86_64_APPIMAGE_SIG }}
      ARM64_APPIMAGE_SIG: ${{ steps.gen_artifacts.outputs.ARM64_APPIMAGE_SIG }}
      #Windows
      x86_64_MSI_SIG: ${{ steps.gen_artifacts.outputs.x86_64_MSI_SIG }}
      x86_64_EXE_SIG: ${{ steps.gen_artifacts.outputs.x86_64_EXE_SIG }}
      ARM64_MSI_SIG: ${{ steps.gen_artifacts.outputs.ARM64_MSI_SIG }}
      ARM64_EXE_SIG: ${{ steps.gen_artifacts.outputs.ARM64_EXE_SIG }}
      #MacOS
      x86_64_APP_SIG: ${{ steps.gen_artifacts.outputs.x86_64_APP_SIG }}
      ARM64_APP_SIG: ${{ steps.gen_artifacts.outputs.ARM64_APP_SIG }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - os: 'windows-2025'
            target: 'x86_64-pc-windows-msvc'
            name: 'Windows x86_64 ü™ü'
          - os: 'windows-2025'
            target: 'aarch64-pc-windows-msvc'
            name: 'Windows ARM64 ü™ü'
          # MacOS
          - os: 'macos-15'
            target: 'aarch64-apple-darwin'
            name: 'MacOS ARM64 üçè'
          - os: 'macos-15'
            target: 'x86_64-apple-darwin'
            name: 'MacOS x86_64 üçè'
          # Linux
          - os: 'ubuntu-24.04'
            target: 'x86_64-unknown-linux-gnu'
            name: 'Linux x86_64 üêß'
          - os: 'ubuntu-24.04-arm'
            target: 'aarch64-unknown-linux-gnu'
            name: 'Linux ARM64 üêß'
          # Android
          - os: 'ubuntu-24.04'
            target: 'aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android'
            name: 'Android ü§ñ'
          # iOS
          # TODO: Not working without Apple Developer Account
#          - os: 'macos-15'
#            target: 'aarch64-apple-ios aarch64-apple-ios-sim'
#            name: 'iOS üì±'
          # Web
          - os: 'macos-15'
            target: ''
            name: 'Web üåê'
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Set Version üìù
        shell: bash
        env:
          RELEASE_TAG: ${{ github.ref_name }}
        run: |
          mv Cargo.toml Cargo.toml.orig
          sed "s/0\\.0\\.0-git/${RELEASE_TAG##*\/v}/" Cargo.toml.orig >Cargo.toml

          mv src-tauri/Cargo.toml src-tauri/Cargo.toml.orig
          sed "s/0\\.0\\.0-git/${RELEASE_TAG##*\/v}/" src-tauri/Cargo.toml.orig >src-tauri/Cargo.toml

          mv src-tauri/tauri.conf.json src-tauri/tauri.conf.json.orig
          sed "s/\"version\": \"0\\.0\\.0-git\"/\"version\": \"${RELEASE_TAG##*\/v}\"/" src-tauri/tauri.conf.json.orig >src-tauri/tauri.conf.json

          mv src-tauri/gen/apple/project.yml src-tauri/gen/apple/project.yml.orig
          sed "s/0\\.0\\.0-git/${RELEASE_TAG##*\/v}/" src-tauri/gen/apple/project.yml.orig >src-tauri/gen/apple/project.yml

          mv src-tauri/gen/apple/zetta-project_iOS/Info.plist src-tauri/gen/apple/zetta-project_iOS/Info.plist.orig
          sed "s/0\\.0\\.0-git/${RELEASE_TAG##*\/v}/" src-tauri/gen/apple/zetta-project_iOS/Info.plist.orig >src-tauri/gen/apple/zetta-project_iOS/Info.plist

      - name: Setup Java ‚òï
        if: ${{ matrix.name == 'Android ü§ñ'}}
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Setup Android ü§ñ
        if: ${{ matrix.name == 'Android ü§ñ'}}
        uses: android-actions/setup-android@v3

      - name: Setup VCPKG Windows üõ†Ô∏è
        if: ${{ matrix.os == 'windows-latest'}}
        run: |
          echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
          vcpkg install openssl:x64-windows-static-md

      - name: Install Cargo Binstall üõ†Ô∏è
        uses: cargo-bins/cargo-binstall@main

      - name: Setup Dependencies & Configs üõ†Ô∏è
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-24.04" || "${{ matrix.os }}" == "ubuntu-24.04-arm"  ]]; then
            sudo apt update -y && sudo apt install libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf xdg-utils -y
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          fi

          if [[ "${{ matrix.name }}" == "Android ü§ñ" ]]; then
            sdkmanager "ndk;$NDK_VERSION"
            echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk/$NDK_VERSION" >> $GITHUB_ENV
          fi

          cargo binstall trunk -y --locked
          cargo binstall tauri-cli -y --version $TAURI_VERSION --locked

      - name: Setup Rust Targets ü¶Ä
        run: rustup target add wasm32-unknown-unknown ${{ matrix.target }}

      - name: Android Sign üîê
        if: ${{ matrix.name == 'Android ü§ñ'}}
        run: |
          cd src-tauri/gen/android
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > keystore.properties
          echo "password=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
          base64 -d <<< "${{ secrets.ANDROID_KEY_BASE64 }}" > $RUNNER_TEMP/keystore.jks
          echo "storeFile=$RUNNER_TEMP/keystore.jks" >> keystore.properties

      - name: Build & Deploy ${{ matrix.name }} üöÄ
        shell: bash
        run: |
          case "${{ matrix.name }}" in
          "Android ü§ñ")
            cargo tauri android build --ci --apk --aab --target aarch64 armv7 i686 x86_64
            ;;

          "iOS üì±")
            export CODE_SIGNING_ALLOWED="NO"
            export CODE_SIGNING_REQUIRED="NO"
            cargo tauri ios build --ci --target aarch64 aarch64-sim x86_64
            ;;

          "Web üåê")
            trunk build --release --public-url "/zetta-project"
            ;;

          *)
            cargo tauri build --ci --target ${{ matrix.target }}
            ;;
          esac

      - name: Setup Github Pages ‚öôÔ∏è
        if: ${{ matrix.name == 'Web üåê'}}
        uses: actions/configure-pages@v5
        with:
          enablement: true

      - name: Upload Github Pages üì§
        if: ${{ matrix.name == 'Web üåê'}}
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/

      - name: Deploy Github Pages üåê
        if: ${{ matrix.name == 'Web üåê'}}
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Upload Artifacts üì¶
        if: ${{ matrix.name != 'Web üåê'}}
        shell: bash
        id: gen_artifacts
        run: |
          case "${{ matrix.name }}" in
            "Windows x86_64 ü™ü")
              gh release upload ${{ github.ref_name }} target/${{ matrix.target }}/release/bundle/msi/Zetta\ Project_${{ github.ref_name }}_x64_en-US.msi \
                target/${{ matrix.target }}/release/bundle/nsis/Zetta\ Project_${{ github.ref_name }}_x64-setup.exe
              
              echo "x86_64_MSI_SIG=$(cat target/${{ matrix.target }}/release/bundle/msi/Zetta\ Project_${{ github.ref_name }}_x64_en-US.msi.sig)" >> $GITHUB_OUTPUT
              echo "x86_64_EXE_SIG=$(cat target/${{ matrix.target }}/release/bundle/nsis/Zetta\ Project_${{ github.ref_name }}_x64-setup.exe.sig)" >> $GITHUB_OUTPUT
              ;;

            "Windows ARM64 ü™ü")
              gh release upload ${{ github.ref_name }} target/${{ matrix.target }}/release/bundle/msi/Zetta\ Project_${{ github.ref_name }}_arm64_en-US.msi \
                target/${{ matrix.target }}/release/bundle/nsis/Zetta\ Project_${{ github.ref_name }}_arm64-setup.exe
              
              echo "ARM64_MSI_SIG=$(cat target/${{ matrix.target }}/release/bundle/msi/Zetta\ Project_${{ github.ref_name }}_arm64_en-US.msi.sig)" >> $GITHUB_OUTPUT
              echo "ARM64_EXE_SIG=$(cat target/${{ matrix.target }}/release/bundle/nsis/Zetta\ Project_${{ github.ref_name }}_arm64-setup.exe.sig)" >> $GITHUB_OUTPUT
              ;;

            "Linux x86_64 üêß")
              gh release upload ${{ github.ref_name }} target/${{ matrix.target }}/release/bundle/deb/Zetta\ Project_${{ github.ref_name }}_amd64.deb \
                target/${{ matrix.target }}/release/bundle/rpm/Zetta\ Project-${{ github.ref_name }}-1.x86_64.rpm \
                target/${{ matrix.target }}/release/bundle/appimage/Zetta\ Project_${{ github.ref_name }}_amd64.AppImage

              echo "x86_64_APPIMAGE_SIG=$(cat target/${{ matrix.target }}/release/bundle/appimage/Zetta\ Project_${{ github.ref_name }}_amd64.AppImage.sig)" >> $GITHUB_OUTPUT
              ;;

            "Linux ARM64 üêß")
              gh release upload ${{ github.ref_name }} target/${{ matrix.target }}/release/bundle/deb/Zetta\ Project_${{ github.ref_name }}_arm64.deb \
                target/${{ matrix.target }}/release/bundle/rpm/Zetta\ Project-${{ github.ref_name }}-1.aarch64.rpm \
                target/${{ matrix.target }}/release/bundle/appimage/Zetta\ Project_${{ github.ref_name }}_aarch64.AppImage

              echo "ARM64_APPIMAGE_SIG=$(cat target/${{ matrix.target }}/release/bundle/appimage/Zetta\ Project_${{ github.ref_name }}_aarch64.AppImage.sig)" >> $GITHUB_OUTPUT
              ;;

            "MacOS x86_64 üçè")
              mv target/${{ matrix.target }}/release/bundle/macos/Zetta\ Project.app.tar.gz target/${{ matrix.target }}/release/bundle/macos/Zetta\ Project_${{ github.ref_name }}_x64.app.tar.gz
              mv target/${{ matrix.target }}/release/bundle/macos/Zetta\ Project.app.tar.gz.sig target/${{ matrix.target }}/release/bundle/macos/Zetta\ Project_${{ github.ref_name }}_x64.app.tar.gz.sig
              gh release upload ${{ github.ref_name }} target/${{ matrix.target }}/release/bundle/dmg/Zetta\ Project_${{ github.ref_name }}_x64.dmg \
                target/${{ matrix.target }}/release/bundle/macos/Zetta\ Project_${{ github.ref_name }}_x64.app.tar.gz

              echo "x86_64_APP_SIG=$(cat target/${{ matrix.target }}/release/bundle/macos/Zetta\ Project_${{ github.ref_name }}_x64.app.tar.gz.sig)" >> $GITHUB_OUTPUT
              ;;

            "MacOS ARM64 üçè")
              mv target/${{ matrix.target }}/release/bundle/macos/Zetta\ Project.app.tar.gz target/${{ matrix.target }}/release/bundle/macos/Zetta\ Project_${{ github.ref_name }}_aarch64.app.tar.gz
              mv target/${{ matrix.target }}/release/bundle/macos/Zetta\ Project.app.tar.gz.sig target/${{ matrix.target }}/release/bundle/macos/Zetta\ Project_${{ github.ref_name }}_aarch64.app.tar.gz.sig
              gh release upload ${{ github.ref_name }} target/${{ matrix.target }}/release/bundle/dmg/Zetta\ Project_${{ github.ref_name }}_aarch64.dmg \
                target/${{ matrix.target }}/release/bundle/macos/Zetta\ Project_${{ github.ref_name }}_aarch64.app.tar.gz

              echo "ARM64_APP_SIG=$(cat target/${{ matrix.target }}/release/bundle/macos/Zetta\ Project_${{ github.ref_name }}_aarch64.app.tar.gz.sig)" >> $GITHUB_OUTPUT
              ;;

            "iOS üì±")
              echo "Not ready yet"
              ;;

            "Android ü§ñ")
              mv src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release.apk src-tauri/gen/android/app/build/outputs/apk/universal/release/Zetta\ Project_${{ github.ref_name }}.apk
              mv src-tauri/gen/android/app/build/outputs/bundle/universalRelease/app-universal-release.aab src-tauri/gen/android/app/build/outputs/bundle/universalRelease/Zetta\ Project_${{ github.ref_name }}.aab
              gh release upload ${{ github.ref_name }} src-tauri/gen/android/app/build/outputs/apk/universal/release/Zetta\ Project_${{ github.ref_name }}.apk \
                src-tauri/gen/android/app/build/outputs/bundle/universalRelease/Zetta\ Project_${{ github.ref_name }}.aab
              ;;
          esac
  updater:
    name: Updater üîÑ
    runs-on: macos-15
    needs: [deploy]
    permissions:
      contents: write
      discussions: write
    environment:
      name: production
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Generate updater üîÑ
        env:
          #Linux
          x86_64_APPIMAGE_SIG: ${{ needs.deploy.outputs.x86_64_APPIMAGE_SIG }}
          ARM64_APPIMAGE_SIG: ${{ needs.deploy.outputs.ARM64_APPIMAGE_SIG }}
          #Windows
          x86_64_MSI_SIG: ${{ needs.deploy.outputs.x86_64_MSI_SIG }}
          x86_64_EXE_SIG: ${{ needs.deploy.outputs.x86_64_EXE_SIG }}
          ARM64_MSI_SIG: ${{ needs.deploy.outputs.ARM64_MSI_SIG }}
          ARM64_EXE_SIG: ${{ needs.deploy.outputs.ARM64_EXE_SIG }}
          #MacOS
          x86_64_APP_SIG: ${{ needs.deploy.outputs.x86_64_APP_SIG }}
          ARM64_APP_SIG: ${{ needs.deploy.outputs.ARM64_APP_SIG }}
        run: |
          cat <<EOF > updater.json
          {
            "version": "${{ github.ref_name }}",
            "pub_date": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')",
            "platforms": {
              "linux-x86_64": {
                "signature": "${x86_64_APPIMAGE_SIG}",
                "url": "https://github.com/MarckFp/zetta-project/releases/download/${{ github.ref_name }}/Zetta.Project_${{ github.ref_name }}_amd64.AppImage"
              },
              "linux-aarch64": {
                "signature": "${ARM64_APPIMAGE_SIG}",
                "url": "https://github.com/MarckFp/zetta-project/releases/download/${{ github.ref_name }}/Zetta.Project_${{ github.ref_name }}_aarch64.AppImage"
              },
              "windows-x86_64": {
                "signature": "${x86_64_MSI_SIG}",
                "url": "https://github.com/MarckFp/zetta-project/releases/download/${{ github.ref_name }}/Zetta.Project_${{ github.ref_name }}_x64_en-US.msi"
              },
              "windows-aarch64": {
                "signature": "${ARM64_MSI_SIG}",
                "url": "https://github.com/MarckFp/zetta-project/releases/download/${{ github.ref_name }}/Zetta.Project_${{ github.ref_name }}_arm64_en-US.msi"
              },
              "darwin-x86_64": {
                "signature": "${x86_64_APP_SIG}",
                "url": "https://github.com/MarckFp/zetta-project/releases/download/${{ github.ref_name }}/Zetta.Project_${{ github.ref_name }}_x64.app.tar.gz"
              },
              "darwin-aarch64": {
                "signature": "${ARM64_APP_SIG}",
                "url": "https://github.com/MarckFp/zetta-project/releases/download/${{ github.ref_name }}/Zetta.Project_${{ github.ref_name }}_aarch64.app.tar.gz"
              }
            }
          }
          EOF
          gh release upload ${{ github.ref_name }} updater.json
  amazon-appstore:
    name: Amazon Appstore üì¶
    runs-on: macos-15
    needs: [deploy]
    environment:
      name: production
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Download app üì•
        shell: bash
        run: curl -L https://github.com/MarckFp/zetta-project/releases/download/${{ github.ref_name }}/Zetta.Project_${{ github.ref_name }}.aab > Zetta.Project_${{ github.ref_name }}.aab

      - name: Upload Amazon AppStore üì§
        uses: galonga/upload-amazon-appstore@v1.0.2
        with:
          clientId: ${{secrets.AMAZON_APPSTORE_CLIENT_ID}}
          clientSecret: ${{secrets.AMAZON_APPSTORE_CLIENT_SECRET}}
          appId: ${{ secrets.AMAZON_APPSTORE_APP_ID }}
          apkFile: Zetta.Project_${{ github.ref_name }}.aab
