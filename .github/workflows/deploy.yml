name: 'Deploy 🚀'

on:
  push:
    tags:
      - '*.*.*'

env:
  GH_TOKEN: ${{ github.token }}
  NDK_VERSION: "27.2.12479018"
  TAURI_VERSION: "^2.0.0"
  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.APP_SIGN_KEY }}
  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.APP_SIGN_PASSWORD }}

jobs:
  deploy:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    environment:
      name: production
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
      contents: write
      discussions: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - os: 'windows-latest'
            target: 'x86_64-pc-windows-msvc'
            name: 'Windows 🪟'
          # MacOS
          - os: 'macos-latest'
            target: 'aarch64-apple-darwin'
            name: 'MacOS ARM64 🍏'
          - os: 'macos-13'
            target: 'x86_64-apple-darwin'
            name: 'MacOS x86_64 🍏'
          # Linux
          - os: 'ubuntu-latest'
            target: 'x86_64-unknown-linux-gnu'
            name: 'Linux 🐧'
          # Android
          - os: 'ubuntu-latest'
            target: 'aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android'
            name: 'Android 🤖'
          # iOS (Not working without Apple Developer Account)
#          - os: 'macos-latest'
#            target: 'aarch64-apple-ios aarch64-apple-ios-sim'
#            name: 'iOS 📱'
          # Web
          - os: 'ubuntu-latest'
            target: ''
            name: 'Web 🌐'
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Cache Rust 🦀
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ matrix.target }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Set Cargo version 📦
        shell: bash
        env:
          RELEASE_TAG: ${{ github.ref_name }}
        run: |
          mv Cargo.toml Cargo.toml.orig
          sed "s/0\\.0\\.0-git/${RELEASE_TAG##*\/v}/" Cargo.toml.orig >Cargo.toml
          mv src-tauri/Cargo.toml src-tauri/Cargo.toml.orig
          sed "s/0\\.0\\.0-git/${RELEASE_TAG##*\/v}/" src-tauri/Cargo.toml.orig >src-tauri/Cargo.toml

      - name: Setup Rust Targets 🦀
        run: rustup target add wasm32-unknown-unknown ${{ matrix.target }}

      - name: Setup Java ☕
        if: ${{ matrix.name == 'Android 🤖'}}
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Setup Android 🤖
        if: ${{ matrix.name == 'Android 🤖'}}
        uses: android-actions/setup-android@v3

      - name: Setup VCPKG Windows 🛠️
        if: ${{ matrix.os == 'windows-latest'}}
        run: |
          echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
          vcpkg install openssl:x64-windows-static-md

      - name: Setup Dependencies & Configs 🛠️
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt update -y && sudo apt install libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf -y
          fi

          if [[ "${{ matrix.name }}" == "Android 🤖" ]]; then
            sdkmanager "ndk;$NDK_VERSION"
            echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk/$NDK_VERSION" >> $GITHUB_ENV
          fi

          cargo install trunk --locked
          cargo install tauri-cli --version $TAURI_VERSION --locked

      - name: Android Sign
        if: ${{ matrix.name == 'Android 🤖'}}
        run: |
          cd src-tauri/gen/android
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > keystore.properties
          echo "password=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
          base64 -d <<< "${{ secrets.ANDROID_KEY_BASE64 }}" > $RUNNER_TEMP/keystore.jks
          echo "storeFile=$RUNNER_TEMP/keystore.jks" >> keystore.properties

      - name: Build & Deploy ${{ matrix.name }} 🚀
        shell: bash
        run: |
          if [[ "${{ matrix.name }}" == "Android 🤖" ]]; then
            cargo tauri android build --ci --apk --aab --target aarch64 armv7 i686 x86_64
          elif [[ "${{ matrix.name }}" == "iOS 📱" ]]; then
            cargo tauri ios init --ci
            cargo tauri ios build --ci --target aarch64 aarch64-sim x86_64
          elif [[ "${{ matrix.name }}" == "Web 🌐" ]]; then
            trunk build --release --public-url "${GITHUB_REPOSITORY#*/}"
          else
            cargo tauri build --ci
          fi

      - name: Setup Github Pages 📄
        if: ${{ matrix.name == 'Web 🌐'}}
        uses: actions/configure-pages@v5
        with:
          enablement: true

      - name: Upload Github Pages 📦
        if: ${{ matrix.name == 'Web 🌐'}}
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: Deploy Github Pages 🌐
        if: ${{ matrix.name == 'Web 🌐'}}
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Upload Artifacts 📦
        if: ${{ matrix.name != 'Web 🌐'}}
        shell: bash
        run: |
          if [[ "${{ matrix.name }}" == "Windows 🪟" ]]; then
            gh release upload ${{ github.ref_name }} target/release/bundle/msi/zetta-project_${{ github.ref_name }}_x64_en-US.msi \
              target/release/bundle/nsis/zetta-project_${{ github.ref_name }}_x64-setup.exe \
              target/release/bundle/msi/zetta-project_${{ github.ref_name }}_x64_en-US.msi.sig \
              target/release/bundle/nsis/zetta-project_${{ github.ref_name }}_x64-setup.exe.sig

          elif [[ "${{ matrix.name }}" == "Linux 🐧" ]]; then
            gh release upload ${{ github.ref_name }} target/release/bundle/deb/zetta-project_${{ github.ref_name }}_amd64.deb \
              target/release/bundle/rpm/zetta-project-${{ github.ref_name }}-1.x86_64.rpm \
              target/release/bundle/appimage/zetta-project_${{ github.ref_name }}_amd64.AppImage

          elif [[ "${{ matrix.name }}" == "MacOS ARM64 🍏" ]]; then
            mv target/release/bundle/macos/zetta-project.app.tar.gz target/release/bundle/macos/zetta-project_${{ github.ref_name }}_aarch64.app.tar.gz
            mv target/release/bundle/macos/zetta-project.app.tar.gz.sig target/release/bundle/macos/zetta-project_${{ github.ref_name }}_aarch64.app.tar.gz.sig
            gh release upload ${{ github.ref_name }} target/release/bundle/dmg/zetta-project_${{ github.ref_name }}_aarch64.dmg \
              target/release/bundle/macos/zetta-project_${{ github.ref_name }}_aarch64.app.tar.gz \
              target/release/bundle/macos/zetta-project_${{ github.ref_name }}_aarch64.app.tar.gz.sig

          elif [[ "${{ matrix.name }}" == "MacOS x86_64 🍏" ]]; then
            mv target/release/bundle/macos/zetta-project.app.tar.gz target/release/bundle/macos/zetta-project_${{ github.ref_name }}_x64.app.tar.gz
            mv target/release/bundle/macos/zetta-project.app.tar.gz.sig target/release/bundle/macos/zetta-project_${{ github.ref_name }}_x64.app.tar.gz.sig
            gh release upload ${{ github.ref_name }} target/release/bundle/dmg/zetta-project_${{ github.ref_name }}_x64.dmg \
              target/release/bundle/macos/zetta-project_${{ github.ref_name }}_x64.app.tar.gz \
              target/release/bundle/macos/zetta-project_${{ github.ref_name }}_x64.app.tar.gz.sig

          elif [[ "${{ matrix.name }}" == "iOS 📱" ]]; then
            zip -r ios.zip target/dx/dx-app/release/ios/DxApp.app
            gh release upload ${{ github.ref_name }} ios.zip

          elif [[ "${{ matrix.name }}" == "Android 🤖" ]]; then
            mv src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-unsigned.apk src-tauri/gen/android/app/build/outputs/apk/universal/release/zetta-project_${{ github.ref_name }}.apk
            mv src-tauri/gen/android/app/build/outputs/bundle/universalRelease/app-universal-release.aab src-tauri/gen/android/app/build/outputs/bundle/universalRelease/zetta-project_${{ github.ref_name }}.aab
            gh release upload ${{ github.ref_name }} src-tauri/gen/android/app/build/outputs/apk/universal/release/zetta-project_${{ github.ref_name }}.apk \
              src-tauri/gen/android/app/build/outputs/bundle/universalRelease/zetta-project_${{ github.ref_name }}.aab
          fi
  updater:
    name: Updater 🔄
    runs-on: ubuntu-latest
    needs: deploy
    environment:
      name: production
    steps:
      - run: |
          mkdir binaries
          cd binaries
          gh release download ${{ github.ref_name }}

          cat <<EOF > updater.json
          {
            "version": "${{ github.ref_name }}",
            "pub_date": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')",
            "platforms": {
              "linux-x86_64": {
                "signature": "$(cat zetta-project_${{ github.ref_name }}_amd64.AppImage.sig)",
                "url": "https://github.com/MarckFp/zetta-project/releases/download/${{ github.ref_name }}/zetta-project_${{ github.ref_name }}_amd64.AppImage"
              },
              "windows-x86_64": {
                "signature": "$(cat zetta-project_${{ github.ref_name }}_x64_en-US.msi.sig)",
                "url": "https://github.com/MarckFp/zetta-project/releases/download/${{ github.ref_name }}/zetta-project_${{ github.ref_name }}_x64_en-US.msi"
              },
              "darwin-x86_64": {
                "signature": "$(cat zetta-project_${{ github.ref_name }}_x64.app.tar.gz.sig)",
                "url": "https://github.com/MarckFp/zetta-project/releases/download/${{ github.ref_name }}/zetta-project_${{ github.ref_name }}_x64.app.tar.gz"
              },
              "darwin-aarch64": {
                "signature": "$(cat zetta-project_${{ github.ref_name }}_aarch64.app.tar.gz.sig)",
                "url": "https://github.com/MarckFp/zetta-project/releases/download/${{ github.ref_name }}/zetta-project_${{ github.ref_name }}_aarch64.app.tar.gz"
              }
            }
          }
          EOF

          gh release upload ${{ github.ref_name }} updater.json
